clear all; close all; clc;
setMainDir;
main_dir = getenv('MAIN_DIR');
ridgeLambda = 0;
numFolds = 10;
isOverwrite = true;

%% Pre-Test Stimulus
timePeriods = {'Intertrial Interval', 'Fixation', 'Rule Stimulus'};
model = {...
    'Previous Error History', ...
    'Previous Error History + Previous Congruency', ...
    'Rule Repetition + Previous Error History', ...
    'Rule + Previous Error History', ...
    'Rule * Previous Error History', ...
    'Rule * Previous Error History + Rule * Previous Congruency', ...
    'Rule * Rule Repetition + Rule * Previous Error History', ...
    };

for time_ind = 1:length(timePeriods),
    fprintf('\n\t Time Period: %s\n', timePeriods{time_ind});
    for model_ind = 1:length(model)
        fprintf('\n Model: %s\n', model{model_ind});
        GAMcluster(model{model_ind}, timePeriods{time_ind}, main_dir, ...
            'numFolds', numFolds, 'overwrite', isOverwrite, ...
            'ridgeLambda', ridgeLambda, 'isPrediction', true);
    end
end

%% Post-Test Stimulus
timePeriods = {'Stimulus Response', 'Saccade', 'Reward'};
model = {...
    'Previous Error History + Response Direction', ...
    'Congruency History + Previous Error History + Response Direction', ...
    'Rule Repetition + Previous Error History + Response Direction', ...
    'Previous Error History + Response Direction + Indicator Prep Time', ...
    'Rule + Previous Error History + Response Direction', ...
    'Rule * Previous Error History + Response Direction', ...
    'Rule * Previous Error History + Rule * Congruency History + Response Direction', ...
    'Rule * Rule Repetition + Rule * Previous Error History + Response Direction', ...
    'Rule * Previous Error History + Response Direction + Rule * Indicator Prep Time', ...
    };

for time_ind = 1:length(timePeriods),
    fprintf('\n\t Time Period: %s\n', timePeriods{time_ind});
    for model_ind = 1:length(model)
        fprintf('\n Model: %s\n', model{model_ind});
        GAMcluster(model{model_ind}, timePeriods{time_ind}, main_dir, ...
            'numFolds', numFolds, 'overwrite', isOverwrite, ...
            'ridgeLambda', ridgeLambda, 'isPrediction', true);
    end
end
